type User {
  id: Int!
  email: String!
  username: String
  password: String
  expenses: [Expense]
}

input RegisterUserInput {
  username: String
  email: String
  password: String
}

input LoginUserInput {
  email: String
  password: String
}

input UserInput {
  email: String!
  username: String
}

type LogoutResponse {
  message: String
}

type LoginResponse {
  userId: String
  token: String
  message: String
}

type isUserLoggedInResponse {
  email: String
}

type currentUserResponse {
  email: String
  username: String
  userId: Int
}

type removeUserAccountResponse {
  message: String
}

type Query {
  user(id: Int!): User
  users: [User]
  isUserLoggedIn: isUserLoggedInResponse
  currentUser: currentUserResponse
}

type Mutation {
  registerUser(registerUserInput: RegisterUserInput): User
  loginUser(loginUserInput: LoginUserInput): LoginResponse
  logoutUser: LogoutResponse
  removeUserAccount(userId: Int!): removeUserAccountResponse
}
